# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'taskStatus.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtWidgets
from sys import argv, exit
import time
from TSQT.logging_handler import QTextBrowerHandler
import logging
from concurrent.futures import ThreadPoolExecutor
from TSQT.get_cookie import cookie_helper
from TSQT.process.get_data import GetData


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(480, 600)
        MainWindow.setMinimumSize(QtCore.QSize(480, 600))
        MainWindow.setMaximumSize(QtCore.QSize(480, 600))
        # 窗口创建
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 40, 61, 31))
        self.label.setObjectName("label")
        # 本期开始时间
        self.start_time_now = QtWidgets.QLineEdit(self.centralwidget)
        self.start_time_now.setEnabled(False)
        self.start_time_now.setGeometry(QtCore.QRect(80, 40, 191, 31))
        self.start_time_now.setObjectName("start_time_now")
        self.start_time_now.setText("2024-11-07 00:00:00")
        # 本期结束时间
        self.end_time_now = QtWidgets.QLineEdit(self.centralwidget)
        self.end_time_now.setEnabled(False)
        self.end_time_now.setGeometry(QtCore.QRect(80, 80, 191, 31))
        self.end_time_now.setObjectName("end_time_now")
        self.end_time_now.setText("2024-11-13 23:59:59")

        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(10, 80, 61, 31))
        self.label_2.setObjectName("label_2")

        self.execute = QtWidgets.QPushButton(self.centralwidget)
        self.execute.setEnabled(False)
        self.execute.setGeometry(QtCore.QRect(380, 150, 71, 31))
        self.execute.setObjectName("execute")

        self.export_excel = QtWidgets.QPushButton(self.centralwidget)
        self.export_excel.setEnabled(False)
        self.export_excel.setGeometry(QtCore.QRect(390, 230, 75, 23))
        self.export_excel.setObjectName("export_excel")

        self.reset = QtWidgets.QPushButton(self.centralwidget)
        self.reset.setGeometry(QtCore.QRect(380, 30, 75, 31))
        self.reset.setObjectName("reset")

        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(-10, 220, 491, 16))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")

        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(0, 110, 341, 16))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")

        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(10, 150, 61, 31))
        self.label_3.setObjectName("label_3")
        #上期开始时间
        self.start_time_compare = QtWidgets.QLineEdit(self.centralwidget)
        self.start_time_compare.setEnabled(False)
        self.start_time_compare.setGeometry(QtCore.QRect(80, 150, 191, 31))
        self.start_time_compare.setObjectName("start_time_compare")
        self.start_time_compare.setText("2024-09-07 00:00:00")
        # 上期结束时间
        self.end_time_compare = QtWidgets.QLineEdit(self.centralwidget)
        self.end_time_compare.setEnabled(False)
        self.end_time_compare.setGeometry(QtCore.QRect(80, 190, 191, 31))
        self.end_time_compare.setObjectName("end_time_compare")
        self.end_time_compare.setText("2024-09-13 23:59:59")

        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(10, 190, 61, 31))
        self.label_4.setObjectName("label_4")

        self.line_3 = QtWidgets.QFrame(self.centralwidget)
        self.line_3.setGeometry(QtCore.QRect(330, 0, 20, 231))
        self.line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")

        self.get_token = QtWidgets.QPushButton(self.centralwidget)
        self.get_token.setGeometry(QtCore.QRect(380, 90, 75, 31))
        self.get_token.setObjectName("get_token")

        self.now_time_label = QtWidgets.QLabel(self.centralwidget)
        self.now_time_label.setGeometry(QtCore.QRect(10, 10, 321, 21))
        self.now_time_label.setStyleSheet("background: rgb(223, 221, 215)")
        self.now_time_label.setObjectName("now_time_label")

        self.compare_time_label = QtWidgets.QLabel(self.centralwidget)
        self.compare_time_label.setGeometry(QtCore.QRect(10, 120, 321, 21))
        self.compare_time_label.setStyleSheet("background: rgb(223, 221, 215)")
        self.compare_time_label.setObjectName("compare_time_label")

        self.text_brower = QtWidgets.QTextBrowser(self.centralwidget)
        self.text_brower.setGeometry(QtCore.QRect(10, 260, 461, 321))
        self.text_brower.setObjectName("text_brower")

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.execute.clicked.connect(self.getText) # type: ignore
        self.export_excel.clicked.connect(self.exportExcel) # type: ignore
        self.get_token.clicked.connect(self.getToken) # type: ignore
        self.reset.clicked.connect(self.Reset)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        self.threadingPool = ThreadPoolExecutor(max_workers=2)
        self.logger = logging.getLogger()
        handler = QTextBrowerHandler(self.text_brower)
        self.logger.addHandler(handler)
        self.cookie = ""
        self.get_data = GetData
        # handler = QTextBrowerHandler()
        # self.logger = logging.getLogger().addHandler(handler)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "任务执行"))
        self.label.setText(_translate("MainWindow", "起始时间"))
        self.label_2.setText(_translate("MainWindow", "结束时间"))
        self.execute.setText(_translate("MainWindow", "Execute"))
        self.export_excel.setText(_translate("MainWindow", "导出excel"))
        self.label_3.setText(_translate("MainWindow", "起始时间"))
        self.label_4.setText(_translate("MainWindow", "结束时间"))
        self.get_token.setText(_translate("MainWindow", "GetToken"))
        self.now_time_label.setText(_translate("MainWindow", "                         本期时间"))
        self.compare_time_label.setText(_translate("MainWindow", "                         对比时间"))
        self.reset.setText(_translate("MainWindow", "Reset"))

    # 重置按钮
    def Reset(self):
        self.start_time_now.setText("")
        self.end_time_now.setText("")
        self.start_time_compare.setText("")
        self.end_time_compare.setText("")
        self.text_brower.setText("")
        self.start_time_now.setDisabled(True)
        self.end_time_now.setDisabled(True)
        self.start_time_compare.setDisabled(True)
        self.end_time_compare.setDisabled(True)
        self.export_excel.setDisabled(True)
        self.execute.setDisabled(True)

    # cookie获取
    def getToken(self):
        self.printFunc("cookie获取开始")
        time.sleep(0.5)
        try:
            cookie_helper.dingding_login_by_pwd()
            self.printFunc("cookie获取成功")
        except Exception as e:
            self.printFunc("cookie获取失败" + str(e))
        self.printFunc("cookie组装开始")
        time.sleep(0.5)
        try:
            self.cookie = cookie_helper.composed_cookie('sjcx')
            self.printFunc("cookie组装成功")
        except Exception as e:
            self.printFunc("cookie组装失败" + str(e))
        self.start_time_now.setDisabled(False)
        self.end_time_now.setDisabled(False)
        self.start_time_compare.setDisabled(False)
        self.end_time_compare.setDisabled(False)
        self.execute.setDisabled(False)

    def getText(self):
        self.printFunc("数据初始化开始")
        try:
            self.get_data_new = self.get_data(self.start_time_now.text(), self.end_time_now.text(), self.start_time_compare.text(), self.end_time_compare.text(), self.cookie)
            self.printFunc("数据初始化完成")
        except Exception as e:
            self.printFunc("数据初始化失败" + str(e))
        self.printFunc("数据处理分析开始")
        try:
            self.get_data_new.task_process()
            self.printFunc("数据处理分析完成")
        except Exception as e:
            self.printFunc("数据处理分析失败" + str(e))
        self.printFunc("上（季报）期数据对比开始")
        try:
            self.get_data_new.compare_last_quarter()
            self.printFunc("上（季报）期数据对比完成")
        except Exception as e:
            self.printFunc("上（季报）期数据对比失败" + str(e))

        self.execute.setDisabled(True)
        self.export_excel.setDisabled(False)

    # 日志绑定文本框组件
    def printFunc(self, process):
        self.threadingPool.submit(self.printLogging, process)

    # 日志打印
    def printLogging(self, process):
        time.sleep(1.5)
        self.logger.info(process)

    # 导出excel文件
    def exportExcel(self):
        self.printFunc("文件生成开始")
        try:
            self.get_data_new.save_file()
            self.printFunc("文件生成成功")
        except Exception as e:
            self.printFunc("文件生成开始失败" + str(e))


if __name__ == "__main__":
    app = QtWidgets.QApplication(argv)
    MainWindow = QtWidgets.QMainWindow()  # 创建窗体对象
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    exit(app.exec_())